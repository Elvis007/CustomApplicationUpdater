It turns out that the default ApplicationUpdaterUI that comes with AIR consumes about 14MB of RAM. The ApplicationUpdaterUI is also loaded into memory to check for available updates even if not displayed (there were no updates available). So just by including the framework in your project, you end up adding 14MB to your application that will not removed or garbage collected. Granted, in most cases 14MB of RAM is not that big of deal. However, for smaller applications you might want to consider an alternative approach.

There happens to another AIR class file called ApplicationUpdater. This class gives you all the benefits of the ApplicationUpdaterUI framework without any of the visible elements. This means you have to build your own user interface. This might actually be a benefit in the long run as you may want to customize your application updater with your own graphics. The other benefit is that you can use the ApplicationUpdater class to check for updates without loading any user interface. The interface only needs to be loaded if there is an actual update available.

In building my own custom updater interface, I thought it might be nice to have the same look and feel of the ApplicationUpdaterUI along with some of the more polite features (like postpone update until restart). I skinned my Custom Application Updater to work with Spark skins in Flash Builder 4 and tried to replicate the look and feel of the default ApplicationUpdaterUI.  Building your own updater using the ApplicationUpdater turns out to be a little more involved than I had originally thought. However, when you start attacking a problem you persevere until the end, no matter what the pain.  So here is the end result of that pain. 

This test application tries to mimic the update process by reading in an external config.xml file that stores the location of our update.xml file used for checking for new versions of the application on the server.  I have included a server folder that stores the location of the update and a newer version of the application file to simulate what happens on the server.   Be aware though, you can't actually update an AIR application from the IDE, you will just go through the motions.    There button that will check the update manually, but you also have the option when instantiating the UpdateManager class to have the update check happen automatically.   